#attach: bool.pi
#attach: stack.pi

#global: 0
#global: 1
#global: 2
#global: 3
#global: 4
#global: 5
#global: 6
#global: 7
#global: 8
#global: 9
#global: 10
#global: eq0
#global: incr
#global: decr
#global: counter
#global: count
#global: add
#global: sub
#global: div
#global: mul
#global: read_base1
#global: write_base1

! Numbers return a step channel which will return ff or tt if there are no more
! steps (after which the step channel no longer responds).
c<<0;  +s->c; a<-s;tt->a.
c<<1;  +s->c; a<-s;ff->a; a<-s;tt->a.
c<<2;  +s->c; a<-s;ff->a; a<-s;ff->a; a<-s;tt->a.
c<<3;  +s->c; a<-s;ff->a; a<-s;ff->a; a<-s;ff->a; a<-s;tt->a.
c<<4;  +s->c; a<-s;ff->a; a<-s;ff->a; a<-s;ff->a; a<-s;ff->a; a<-s;tt->a.
c<<5;  +s->c; a<-s;ff->a; a<-s;ff->a;
  a<-s;ff->a; a<-s;ff->a; a<-s;ff->a; a<-s;tt->a.
c<<6;  +s->c; a<-s;ff->a; a<-s;ff->a; a<-s;ff->a;
  a<-s;ff->a; a<-s;ff->a; a<-s;ff->a; a<-s;tt->a.
c<<7;  +s->c; a<-s;ff->a; a<-s;ff->a; a<-s;ff->a;
  a<-s;ff->a; a<-s;ff->a; a<-s;ff->a; a<-s;tt->a; a<-s;ff->a.
c<<8;  +s->c; a<-s;ff->a; a<-s;ff->a; a<-s;ff->a; a<-s;ff->a;
  a<-s;ff->a; a<-s;ff->a; a<-s;ff->a; a<-s;ff->a; a<-s;tt->a.
c<<9;  +s->c; a<-s;ff->a; a<-s;ff->a; a<-s;ff->a; a<-s;ff->a;
  a<-s;ff->a; a<-s;ff->a; a<-s;ff->a; a<-s;ff->a; a<-s;tt->a; a<-s;ff->a.
c<<10; +s->c; a<-s;ff->a; a<-s;ff->a; a<-s;ff->a; a<-s;ff->a; a<-s;ff->a;
  a<-s;ff->a; a<-s;ff->a; a<-s;ff->a; a<-s;ff->a; a<-s;ff->a; a<-s;tt->a.

! Zero-check if statement
n,t,f<<<eq0; s<-<n; is_zero<-<s; t,f>->is_zero.

! Increment
n,ret<<<incr; +k->ret; c<<k; ns<-<n; +s->c; a<-s;ff->a; s>>ns.

! Unsafe decrement (no zero check)
n,ret<<<decr; +k->ret; c<<k; s<-<n; <>s; s->c.

! Counter
c<<counter; get,set<-<cell; +value,increment,reset;(
  <>reset; value,increment,reset->c.
  tun<<value; n<-<get; tun->n.
  ack<<increment; n<-<get; +ret; n,ret>->incr; m<-ret; m,ack>->set.
  ack<<reset; 0,ack>->set.
)

! Create number from a step channel.
s,ret<<<count; k,incr<-<counter; +loop;(
  ->loop.
  <<loop; z<-<s; +t,f;(
    t,f>->z.
    <-t; k->ret.
    <-f; <>incr; ->loop.
  )
)

! Addition
n,m,ret<<<add; +k->ret;
c<<k; ns<-<n; ms<-<m; ,next,stage<-<bool; +step->c;
a<<step; +use_n,use_m;(
  use_n,use_m>->stage.
  <-use_n; z<-<ns; +t,f;(
    t,f>->z.
    <-t; <>next; a->step.
    <-f; ff->a.
  )
  <-use_m; z<-<ms; +t,f;(
    t,f>->z.
    <-t; tt->a.
    <-f; ff->a.
  )
)

! Subtraction (returns result and if m fits in n)
n,m,ret<<<sub; ns<-<n; ms<-<m; +loop;(
  ->loop.
  <<loop; nz<-<ns; mz<-<ms; +t_t,t_f,f_t,f_f;(
    nz,mz,t_t,t_f,f_t,f_f>->dual_if.
    <-t_t; 0,tt->ret.
    <-t_f; 0,ff->ret.
    <-f_t; +ans; ns,ans>->count; k<-ans; k,ans>->incr; k<-ans; k,tt->ret.
    <-f_f; ->loop.
  )
)

! Integer division of n by m. Returns result (k) and remainder (rem).
n,m,ret<<<div; get,set<-<cell; k,k_incr<-<counter;
+ack; n,ack>->set; <-ack; +loop;(
  ->loop.
  <<loop; rem<-<get; +ans; rem,m,ans>->sub; remm,ge<-ans; +t,f;(
    t,f>->ge.
    <-t; +ack; remm,ack>->set; <-ack; <>k_incr; ->loop.
    <-f; k,rem->ret.
  )
)

! Multiplication
n,m,ret<<<mul; get,set<-<cell; +ack; 0,ack>->set; <-ack; ns<-<n; +loop;(
  ->loop.
  <<loop; acc<-<get; is_zero<-<ns; +return,add_m;(
    return,add_m>->is_zero.
    <-return; acc->ret.
    <-add_m;
      +ret; acc,m,ret>->add; acc<-ret;
      +ack; acc,ack>->set; <-ack;
      ->loop.
  )
)

! Base 1 encoding of numbers: 0, 10, 110, 1110, ..., 1^n0

! Read base 1 number from stdin.
ret<<read_base1; ,finish,active<-<bool; n,incr<-<counter;(
  ->stdin_read.
  <-stdin_5F; <>finish; n->ret.
  <<stdin__1; +do;(do,>->active. <-do; <>incr; ->stdin_read.)
)

! Write base 1 number to stdout.
n,ready<<<write_base1; s<-<n; +loop;(
  ->loop;
  <<loop; is_zero<-<s; +t,f;(
    t,f>->is_zero.
    <-t; <>stdout_5F; ->ready.
    <-f; <>stdout__1; ->loop.
  )
)