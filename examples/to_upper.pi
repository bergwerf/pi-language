! Convert the input string to upper case.

+forward;+ready;(
  ! Forward all messages through in to out and trigger a byte read.
  args<<forward; ->args; in<-args; out<-args; ready<-args;(
    +x; x->ready. m<<in; m->out; m<-stdout_write; m->stdin_read.)

  ! Forward uppercase letters.
  +c; c->forward; <-c; stdin__A->c; stdout__A->c; ready->c.
  +c; c->forward; <-c; stdin__B->c; stdout__B->c; ready->c.
  +c; c->forward; <-c; stdin__C->c; stdout__C->c; ready->c.
  +c; c->forward; <-c; stdin__D->c; stdout__D->c; ready->c.
  +c; c->forward; <-c; stdin__E->c; stdout__E->c; ready->c.
  +c; c->forward; <-c; stdin__F->c; stdout__F->c; ready->c.
  +c; c->forward; <-c; stdin__G->c; stdout__G->c; ready->c.
  +c; c->forward; <-c; stdin__H->c; stdout__H->c; ready->c.
  +c; c->forward; <-c; stdin__I->c; stdout__I->c; ready->c.
  +c; c->forward; <-c; stdin__J->c; stdout__J->c; ready->c.
  +c; c->forward; <-c; stdin__K->c; stdout__K->c; ready->c.
  +c; c->forward; <-c; stdin__L->c; stdout__L->c; ready->c.
  +c; c->forward; <-c; stdin__M->c; stdout__M->c; ready->c.
  +c; c->forward; <-c; stdin__N->c; stdout__N->c; ready->c.
  +c; c->forward; <-c; stdin__O->c; stdout__O->c; ready->c.
  +c; c->forward; <-c; stdin__P->c; stdout__P->c; ready->c.
  +c; c->forward; <-c; stdin__Q->c; stdout__Q->c; ready->c.
  +c; c->forward; <-c; stdin__R->c; stdout__R->c; ready->c.
  +c; c->forward; <-c; stdin__S->c; stdout__S->c; ready->c.
  +c; c->forward; <-c; stdin__T->c; stdout__T->c; ready->c.
  +c; c->forward; <-c; stdin__U->c; stdout__U->c; ready->c.
  +c; c->forward; <-c; stdin__V->c; stdout__V->c; ready->c.
  +c; c->forward; <-c; stdin__W->c; stdout__W->c; ready->c.
  +c; c->forward; <-c; stdin__X->c; stdout__X->c; ready->c.
  +c; c->forward; <-c; stdin__Y->c; stdout__Y->c; ready->c.
  +c; c->forward; <-c; stdin__Z->c; stdout__Z->c; ready->c.

  ! Convert lowercase input to uppercase output.
  +c; c->forward; <-c; stdin__a->c; stdout__A->c; ready->c.
  +c; c->forward; <-c; stdin__b->c; stdout__B->c; ready->c.
  +c; c->forward; <-c; stdin__c->c; stdout__C->c; ready->c.
  +c; c->forward; <-c; stdin__d->c; stdout__D->c; ready->c.
  +c; c->forward; <-c; stdin__e->c; stdout__E->c; ready->c.
  +c; c->forward; <-c; stdin__f->c; stdout__F->c; ready->c.
  +c; c->forward; <-c; stdin__g->c; stdout__G->c; ready->c.
  +c; c->forward; <-c; stdin__h->c; stdout__H->c; ready->c.
  +c; c->forward; <-c; stdin__i->c; stdout__I->c; ready->c.
  +c; c->forward; <-c; stdin__j->c; stdout__J->c; ready->c.
  +c; c->forward; <-c; stdin__k->c; stdout__K->c; ready->c.
  +c; c->forward; <-c; stdin__l->c; stdout__L->c; ready->c.
  +c; c->forward; <-c; stdin__m->c; stdout__M->c; ready->c.
  +c; c->forward; <-c; stdin__n->c; stdout__N->c; ready->c.
  +c; c->forward; <-c; stdin__o->c; stdout__O->c; ready->c.
  +c; c->forward; <-c; stdin__p->c; stdout__P->c; ready->c.
  +c; c->forward; <-c; stdin__q->c; stdout__Q->c; ready->c.
  +c; c->forward; <-c; stdin__r->c; stdout__R->c; ready->c.
  +c; c->forward; <-c; stdin__s->c; stdout__S->c; ready->c.
  +c; c->forward; <-c; stdin__t->c; stdout__T->c; ready->c.
  +c; c->forward; <-c; stdin__u->c; stdout__U->c; ready->c.
  +c; c->forward; <-c; stdin__v->c; stdout__V->c; ready->c.
  +c; c->forward; <-c; stdin__w->c; stdout__W->c; ready->c.
  +c; c->forward; <-c; stdin__x->c; stdout__X->c; ready->c.
  +c; c->forward; <-c; stdin__y->c; stdout__Y->c; ready->c.
  +c; c->forward; <-c; stdin__z->c; stdout__Z->c; ready->c.

  ! Add a newline after the input.
  <-stdin_EOF; ->stdout_0A.

  ! Wait until all 26 + 26 forwards are ready.
  x<-ready; x<-ready; x<-ready; x<-ready; x<-ready;
  x<-ready; x<-ready; x<-ready; x<-ready; x<-ready;
  x<-ready; x<-ready; x<-ready; x<-ready; x<-ready;
  x<-ready; x<-ready; x<-ready; x<-ready; x<-ready;
  x<-ready; x<-ready; x<-ready; x<-ready; x<-ready;
  x<-ready; x<-ready; x<-ready; x<-ready; x<-ready;
  x<-ready; x<-ready; x<-ready; x<-ready; x<-ready;
  x<-ready; x<-ready; x<-ready; x<-ready; x<-ready;
  x<-ready; x<-ready; x<-ready; x<-ready; x<-ready;
  x<-ready; x<-ready; x<-ready; x<-ready; x<-ready;
  x<-ready; x<-ready; x->stdin_read.
)